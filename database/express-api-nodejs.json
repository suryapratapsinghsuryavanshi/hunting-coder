{
    "title": "How to Use TypeScript to Build a Node API with Express",
    "date": "Sun 08-28-2022",
    "desc": "API in express with TypeScript.",
    "content": "<p>I this article we have seen how to build a NodeJs Express API with the help of typescript.<\/p>\r\n\r\n<p>This article will discuss how to create an Express Route and API in TypeScript and help us with the default type checking mechanism. And we will create some Fake API endpoints with the help of TypeScript with ExpressJs configuration and understand how to use TypeScript in our ExpressJs project.<\/p>\r\n\r\n<p>TypeScript is a superset of JavaScript with some additional features that JavaScript doesn&#39;t have such as type notation and static type changing or using es6&#39;s code in older codebases. Typescript provides all the features. If you want to create an API service in typescript use of express with NodeJS, you must first set up your project with typescript. If you have no idea about how to set up express in typescript refer to <a href=\"https:\/\/www.geeksforgeeks.org\/how-to-use-express-in-typescript\/\">this article.<\/a><\/p>\r\n\r\n<p>I hope you have set up your express project with typescript using the above article now we will start to create our first API in Typescript.&nbsp;<\/p>\r\n\r\n<h3>Prerequisites:<\/h3>\r\n\r\n<ul>\r\n\t<li>Basic knowledge about NodeJs.<\/li>\r\n\t<li>Basic knowledge about Express Js and their routes management techniques.<\/li>\r\n\t<li>Basic knowledge about TypeScript and its uses.<\/li>\r\n<\/ul>\r\n\r\n<h3>The approach of your first API in typescript:<\/h3>\r\n\r\n<blockquote>\r\n<p>1. Setup directory Structure according to the above-mentioned article.<\/p>\r\n\r\n<p>2. Initiate ExpressJs with TypeScript.<\/p>\r\n\r\n<p>3. Will create two fake API to create a user and get user data with ExpressJs TypeScript configuration.<\/p>\r\n\r\n<p>4. See the final codebase file.<\/p>\r\n\r\n<p>5. Will test our API endpoints with the help of the Postman API Testing Tool and see our API output.<\/p>\r\n<\/blockquote>\r\n\r\n<h3>Step 1:<\/h3>\r\n\r\n<p>If you are set up the project in the use of the above article your directory looks like this.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210707233744\/dir.jpg\" style=\"width:223px\" \/><\/p>\r\n\r\n<p>Open the index.ts file and write the below code.<\/p>\r\n\r\n<h3>Step 2:&nbsp;<\/h3>\r\n\r\n<p>First of all, create an ExpressJs code in TypeScript and flow the good practices if you don&#39;t understand this much please read the above-mentioned article.<\/p>\r\n\r\n<p><strong>index.js<\/strong><\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ import the express with express name.\r\nimport express from 'express';\r\n\r\n\/\/ initialize the express moduel with app variable.\r\nconst app: express.Application = express();\r\n\r\n\/\/ define the port for the application are run.\r\nconst port: number = 3000;\r\n\r\n\/\/ handle the comming data.\r\napp.use(express.json());\r\n\r\n\/\/ Handle '\/', path of the api.\r\napp.get('\/', (_req, _res): void =&gt; {\r\n    _res.json({\r\n        'name': 'typescitp_api',\r\n        'path': '\/',\r\n        'work': 'search_other_apis'\r\n    });\r\n});\r\n\r\n\r\n\/\/ server the api endpints.\r\napp.listen(port, (): void =&gt; {\r\n    console.log(`Typescript API server http:\/\/localhost:${port}\/`);\r\n});<\/code><\/pre>\r\n\r\n<p>after doing the second step go to the third step.<\/p>\r\n\r\n<h3>Step 3:<\/h3>\r\n\r\n<p>In this step, we create two API endpoints for creating the user and getting the users&#39; data.<\/p>\r\n\r\n<p>Firstly create a global array to treat as a fake database.<\/p>\r\n\r\n<blockquote>\r\n<p>let fake_db: any = [];<\/p>\r\n<\/blockquote>\r\n\r\n<p>Then create a first API endpoint to create the users and store the user data in the fake database. We are work with API endpoint so data are passed through the post method or JSON data formate.<\/p>\r\n\r\n<p>In the below code, we firstly Handel a post request and create a &nbsp;&#39;\/create&#39; route the manage or create user API endpoint and after that assign the coming body data to our fake database and return appropriate output.<\/p>\r\n\r\n<p><strong>index.js<\/strong><\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ Handle '\/create', path for create user.\r\napp.post('\/create', (_req, _res): void =&gt; {\r\n    \/\/ fatched the user using body data.\r\n    const user: object = _req.body;\r\n\r\n    \/\/ asigen the user in fake_db with id as a index.\r\n    fake_db.push(user);\r\n\r\n    _res.json({\r\n        \"success\": true,\r\n        \"data\": user\r\n    });\r\n});<\/code><\/pre>\r\n\r\n<p>The second API only shows the array data. In simple get request. Here we only return our fake database as a JSON format.<\/p>\r\n\r\n<p><strong>index.js<\/strong><\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ Handle '\/users', path for fatch users.\r\napp.get('\/users', (_req, _res): void =&gt; {\r\n    _res.json({\r\n        \"success\": true,\r\n        \"users\": fake_db \r\n    });\r\n})<\/code><\/pre>\r\n\r\n<p>after creating both API navigate the index.ts path and run the server using the below command on the terminal.<\/p>\r\n\r\n<blockquote>\r\n<p>npm start<\/p>\r\n<\/blockquote>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210802164402\/one.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>If the application runs properly, move to the fourth step, Or not please follow the article carefully.<\/p>\r\n\r\n<h3>Step 4:<\/h3>\r\n\r\n<p><strong>Final Codebase.<\/strong><\/p>\r\n\r\n<p>All the above code is just to show how to create the route and this is the final index.js file that contains all the above code discussed.<\/p>\r\n\r\n<p><strong>index.js<\/strong><\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ import the express with express name.\r\nimport express from 'express';\r\n\r\n\/\/ initialize the express moduel with app variable.\r\nconst app: express.Application = express();\r\n\r\n\/\/ define the port for the application are run.\r\nconst port: number = 3000;\r\n\r\n\/\/ handle the comming data.\r\napp.use(express.json());\r\n\r\n\/\/ Handle '\/', path of the api.\r\napp.get('\/', (_req, _res): void =&gt; {\r\n    _res.json({\r\n        'name': 'typescitp_api',\r\n        'path': '\/',\r\n        'work': 'search_other_apis'\r\n    });\r\n});\r\n\r\n\/\/ A globle Object treat as a fake database.\r\nlet fake_db: any = [];\r\n\r\n\/\/ Handle '\/create', path for create user.\r\napp.post('\/create', (_req, _res): void =&gt; {\r\n    \/\/ fatched the user using body data.\r\n    const user: object = _req.body;\r\n\r\n    \/\/ asigen the user in fake_db with id as a index.\r\n    fake_db.push(user);\r\n\r\n    _res.json({\r\n        \"success\": true,\r\n        \"data\": user\r\n    });\r\n});\r\n\r\n\/\/ Handle '\/users', path for fatch users.\r\napp.get('\/users', (_req, _res): void =&gt; {\r\n    _res.json({\r\n        \"success\": true,\r\n        \"users\": fake_db \r\n    });\r\n})\r\n\r\n\/\/ serve the api endpints.\r\napp.listen(port, (): void =&gt; {\r\n    console.log(`Typescript API server http:\/\/localhost:${port}\/`);\r\n});<\/code><\/pre>\r\n\r\n<p>After writing all codes lets, move to the test phase and look at what our API makes output.<\/p>\r\n\r\n<h3>Step 5:<\/h3>\r\n\r\n<p>Test <strong>&#39;\/&#39; root<\/strong> path using postman.<\/p>\r\n\r\n<p>If you don&#39;t know about the postman refer to <a href=\"https:\/\/www.geeksforgeeks.org\/introduction-postman-api-development\/\">this article.<\/a><\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210802165506\/two.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>the root path working properly, so we are moving to another API endpoint.<\/p>\r\n\r\n<p>Test <strong>&#39;\/create&#39;<\/strong> path in post request using postman.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210802170543\/three.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>we pass raw JSON data directly.<\/p>\r\n\r\n<p>Test <strong>&#39;\/users&#39;<\/strong> path using postman.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210802171349\/four.gif\" style=\"width:800px\" \/><\/p>\r\n",
    "author": "Suryapratap Singh",
    "like": 0
}