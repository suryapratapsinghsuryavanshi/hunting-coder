{
    "title": "How to Create and Verify JWTs with NodeJs",
    "date": "Sun 08-28-2022",
    "desc": "Use JWT in NodeJs.",
    "content": "<p>In this article, we will see how to create and verify JWT tokens in NodeJs.<\/p>\r\n\r\n<p>In web development, we also want to secure our route so we have 3 types of ways to secure our route they are cookies, session, or API authentication. The cookies and session only work with the browser if you want secure routes in the API&#39;s endpoints. So you must need API&#39;s authentication mechanism. Or in the present time, we mostly work with API&#39;s so it is essential to make secure API endpoints.<\/p>\r\n\r\n<p>The most popular way in API&#39;s authentication is the use of JsonWebToken, the work with many types of technologies as well as NodeJs also. In this article, we have created some dummy API endpoints with the help of ExpressJs and make their routes secure with the help of the JWT token mechanism and undersend how they work and verify the tokens.<\/p>\r\n\r\n<p>The abbreviation for JsonWebtoken is JWT.<\/p>\r\n\r\n<p>Before starting the article we will discuss here the problem details of the article, we are talking about the most popular method to secure API endpoints. Which JWT provides. We will first set up NodeJs to write our code, then we will see how to create and verify the JWT token, finally, we will see the output of our API with the help of the Postman API Testing Tool.<\/p>\r\n\r\n<h3>Prerequisites:<\/h3>\r\n\r\n<ul>\r\n\t<li>Good knowledge of JavaScript.<\/li>\r\n\t<li>Basic knowledge about NodeJs and ExpressJs.<\/li>\r\n\t<li>Basic knowledge about API Authentication.<\/li>\r\n\t<li>Basic knowledge about postman and their uses.<\/li>\r\n<\/ul>\r\n\r\n<h3>The approach of this article:<\/h3>\r\n\r\n<ol>\r\n\t<li>Set up a project to work with NodeJs.<\/li>\r\n\t<li>Install ExpressJs, JsonWebToken, and some other dependencies using NPM.<\/li>\r\n\t<li>Write code for creating and verify the JWT tokens.<\/li>\r\n\t<li>Test API authentication using API Testing Tool (Postman).<\/li>\r\n<\/ol>\r\n\r\n<p>Follow all the steps carefully.<\/p>\r\n\r\n<h3>Step 1:<\/h3>\r\n\r\n<p>Firstly set up the NodeJs project.<\/p>\r\n\r\n<p>If you do not have<a href=\"https:\/\/www.geeksforgeeks.org\/installation-of-node-js-on-windows\/\"> NodeJs<\/a> or <a href=\"https:\/\/www.geeksforgeeks.org\/node-js-npm-node-package-manager\/\">NPM<\/a> please refer to this article.<\/p>\r\n\r\n<p>Initiate NodeJs project with npm.<\/p>\r\n\r\n<blockquote>\r\n<p>npm init -y<\/p>\r\n<\/blockquote>\r\n\r\n<p>&quot;-y&quot; to mark all question answers as default.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210803154819\/one.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>after initiating the NodeJs project move to the second step.<\/p>\r\n\r\n<h3>Step 2:<\/h3>\r\n\r\n<p>After initiating the project install some dependencies.<\/p>\r\n\r\n<p>Install express, and jsonwebtoken through npm<\/p>\r\n\r\n<blockquote>\r\n<p>npm install express jsonwebtoken<\/p>\r\n<\/blockquote>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210803155330\/two.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>Install nodemon as a dev-dependency.<\/p>\r\n\r\n<blockquote>\r\n<p>npm install -d nodemon<\/p>\r\n<\/blockquote>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210803160058\/three.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>After the installation is complete, create an index.js file and now your directory structure looks like this.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210802102256\/dir.jpg\" style=\"width:242px\" \/><\/p>\r\n\r\n<p>add one more script in the package.json file.<\/p>\r\n\r\n<p>open the package.json file and add one line below to the test script.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210803160607\/four.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>After all the things are done move to the third step.<\/p>\r\n\r\n<h3>Step 3:<\/h3>\r\n\r\n<p>Before create and verify the API endpoint with the help of JWT, and express firstly write some code for further use.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ import express for creating API's endpoints.\r\nconst express = require('express');\r\n\r\n\/\/ import jwt for API's endpionts authentication.\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\/\/ creates an Express application, initiate express top level function.\r\nconst app = express();\r\n\r\n\/\/ a port for serving API's\r\nconst port = 3000;\r\n\r\n\r\n\/\/ a demo get route.\r\napp.get('\/', (req, res) =&gt; {\r\n    res.json({\r\n        route: '\/',\r\n        authentication: false\r\n    });\r\n});\r\n\r\n\r\n\/\/ listen the server.\r\napp.listen(port, () =&gt; {\r\n    console.log(`Servr is running : http:\/\/localhost:${port}\/`);\r\n});<\/code><\/pre>\r\n\r\n<p>All the code described in the comments please read the code comment for better understanding.<\/p>\r\n\r\n<p>After the dummy code is ready, then create a fake database object and store some fake data.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ a faek database object.\r\nlet databse = [\r\n    {\r\n        name: 'gfg',\r\n        work: 'knowledge provider',\r\n        password: 'abc'\r\n    },\r\n    {\r\n        name: 'suryapratap',\r\n        work: 'technical content writer',\r\n        password: '123'\r\n    }\r\n];<\/code><\/pre>\r\n\r\n<p>Allow JSON data to make communication with API.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Allow the JSON data in a request.<\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ allow json data.\r\napp.use(express.json());<\/code><\/pre>\r\n\r\n<p>Create a login route and create a JWT token.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Here, create a login post route and create a JWT token and return it to the response., read code comments for better understanding.<\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ login route.\r\napp.post('\/login', (req, res) =&gt; {\r\n    \/\/ get the name to the json body data.\r\n    const name = req.body.name;\r\n\r\n    \/\/ get the password to the json body data.\r\n    const password = req.body.password;\r\n\r\n    \/\/ make two variable for further use.\r\n    let isPresent = false;\r\n    let isPresnetIndex = null;\r\n\r\n    \/\/ itarate a loop to the data items and check what data are matchd.\r\n    for(let i=0; i&lt;databse.length; i++){\r\n        \/\/ if data name are matched so check the password are correct or not.\r\n        if(databse[i].name === name &amp;&amp; databse[i].password === password){\r\n            \/\/ if both are correct so make isPresent variable true.\r\n            isPresent = true;\r\n            \/\/ and store the data index.\r\n            isPresnetIndex = i;\r\n            \/\/ break the loop affter matching successfull.\r\n            break;\r\n        }\r\n    }\r\n\r\n    \/\/ if isPresent is true, then create a token and pass to the response.\r\n    if(isPresent){\r\n        \/\/ the jwt.sign method are used to create token.\r\n        const token = jwt.sign(\r\n            databse[isPresnetIndex],\r\n            'secret'\r\n        );\r\n        \r\n        \/\/ pass the data or token in response.\r\n        res.json({\r\n            login: true,\r\n            token: token,\r\n            data: databse[isPresnetIndex]\r\n        });\r\n    }else{\r\n        \/\/ if isPresent is false return the error.\r\n        res.json({\r\n            login: false,\r\n            eroor: 'plese check name and password.'\r\n        });\r\n    }\r\n});<\/code><\/pre>\r\n\r\n<p>JWT sign method is used to creating a token the take are three arguments one is a response object, and the second one is a secret key and the last one is an options object for better use of the token.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Prototype of jwt.sign() method.<\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>jwt.sign(\r\n\t{data_obeject},\r\n\t\"secret_key\",\r\n\t{Options}\r\n)<\/code><\/pre>\r\n\r\n<p>If you want more about the jwt.sign method refer to the <a href=\"https:\/\/www.npmjs.com\/package\/jsonwebtoken\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">official documentation.<\/a><\/p>\r\n\r\n<p>Make another route for authentication jwt token.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Here, we create an authentication route and authenticate the coming JWT token.<\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ verify route.\r\napp.get('\/auth', (req, res) =&gt; {\r\n    \/\/ get token vlaue to the json body.\r\n    const token = req.body.token;\r\n\r\n    \/\/ if the token is present.\r\n    if(token){\r\n        \/\/ verify the token using jwt.verify method.\r\n        const decode = jwt.verify(token, 'secret');\r\n\r\n        \/\/  return response with decode data.\r\n        res.json({\r\n            login: true,\r\n            data: decode\r\n        });\r\n    }else{\r\n        \/\/ return response weith error.\r\n        res.json({\r\n            login: false,\r\n            data: 'error'\r\n        });\r\n    }\r\n});<\/code><\/pre>\r\n\r\n<p>JWT verify method is used for verify the token the take two arguments one is token string value, and second one is secret key for matching the token is valid or not.<\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Prototype of jwt.verify() method.<\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>jwt.verify(token_value, 'secret_key');<\/code><\/pre>\r\n\r\n<p>The validation method returns a decode object that we stored the token in.<\/p>\r\n\r\n<p>If you want more about the jwt.verify method refer to the <a href=\"https:\/\/www.npmjs.com\/package\/jsonwebtoken\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">official documentation.<\/a><\/p>\r\n\r\n<p><strong>Final code.<\/strong><\/p>\r\n\r\n<p><strong>\/\/ index.js<\/strong><\/p>\r\n\r\n<p>Final code in here all the above mentions code in here and read comment for better understanding.<\/p>\r\n\r\n<p>Javascript<\/p>\r\n\r\n<pre>\r\n<code>\/\/ import express for creating API's endpoints.\r\nconst express = require('express');\r\n\r\n\/\/ import jwt for API's endpionts authentication.\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\/\/ creates an Express application, initiate express top level function.\r\nconst app = express();\r\n\r\n\/\/ a port for serving API's\r\nconst port = 3000;\r\n\r\n\/\/ a faek database object.\r\nlet databse = [\r\n    {\r\n        name: 'gfg',\r\n        work: 'knowledge provider',\r\n        password: 'abc'\r\n    },\r\n    {\r\n        name: 'suryapratap',\r\n        work: 'technical content writer',\r\n        password: '123'\r\n    }\r\n];\r\n\r\n\r\n\/\/ a demo get route.\r\napp.get('\/', (req, res) =&gt; {\r\n    res.json({\r\n        route: '\/',\r\n        authentication: false\r\n    });\r\n});\r\n\r\n\/\/ allow json data.\r\napp.use(express.json());\r\n\r\n\/\/ login route.\r\napp.post('\/login', (req, res) =&gt; {\r\n    \/\/ get the name to the json body data.\r\n    const name = req.body.name;\r\n\r\n    \/\/ get the password to the json body data.\r\n    const password = req.body.password;\r\n\r\n    \/\/ make two variable for further use.\r\n    let isPresent = false;\r\n    let isPresnetIndex = null;\r\n\r\n    \/\/ itarate a loop to the data items and check what data are matchd.\r\n    for(let i=0; i&lt;databse.length; i++){\r\n        \/\/ if data name are matched so check the password are correct or not.\r\n        if(databse[i].name === name &amp;&amp; databse[i].password === password){\r\n            \/\/ if both are correct so make isPresent variable true.\r\n            isPresent = true;\r\n            \/\/ and store the data index.\r\n            isPresnetIndex = i;\r\n            \/\/ break the loop affter matching successfull.\r\n            break;\r\n        }\r\n    }\r\n\r\n    \/\/ if isPresent is true, then create a token and pass to the response.\r\n    if(isPresent){\r\n        \/\/ the jwt.sign method are used to create token.\r\n        const token = jwt.sign(\r\n            databse[isPresnetIndex],\r\n            'secret'\r\n        );\r\n        \r\n        \/\/ pass the data or token in response.\r\n        res.json({\r\n            login: true,\r\n            token: token,\r\n            data: databse[isPresnetIndex]\r\n        });\r\n    }else{\r\n        \/\/ if isPresent is false return the error.\r\n        res.json({\r\n            login: false,\r\n            eroor: 'plese check name and password.'\r\n        });\r\n    }\r\n});\r\n\r\n\r\n\/\/ verify route.\r\napp.get('\/auth', (req, res) =&gt; {\r\n    \/\/ get token vlaue to the json body.\r\n    const token = req.body.token;\r\n\r\n    \/\/ if the token is present.\r\n    if(token){\r\n        \/\/ verify the token using jwt.verify method.\r\n        const decode = jwt.verify(token, 'secret');\r\n\r\n        \/\/  return response with decode data.\r\n        res.json({\r\n            login: true,\r\n            data: decode\r\n        });\r\n    }else{\r\n        \/\/ return response weith error.\r\n        res.json({\r\n            login: false,\r\n            data: 'error'\r\n        });\r\n    }\r\n});\r\n\r\n\r\n\/\/ listen the server.\r\napp.listen(port, () =&gt; {\r\n    console.log(`Servr is running : http:\/\/localhost:${port}\/`);\r\n});<\/code><\/pre>\r\n\r\n<p>After setup, the API endpoints run in the test part.<\/p>\r\n\r\n<h3>Step 4:<\/h3>\r\n\r\n<p>Firstly test the login route.<\/p>\r\n\r\n<p>Open the postman and make a post request on the <strong>&#39;\/login&#39;<\/strong> route with appropriate JSON data.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210803161813\/five.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>Use the localhost address and make a post request in \/login route and send the appropriate data in json format.<\/p>\r\n\r\n<p>and finally, you get a JSON response with login status and the token or data of the object.<\/p>\r\n\r\n<p>Use the token to authentication of the API endpoints.<\/p>\r\n\r\n<p>again use the localhost address and make a get request in <strong>&#39;\/auth&#39;<\/strong> route and send the appropriate data token.<\/p>\r\n\r\n<p><img src=\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20210803162502\/six.gif\" style=\"width:800px\" \/><\/p>\r\n\r\n<p>After validation, you will get the proper data object store in the token.<\/p>\r\n\r\n<p>If you want more about the jwt methods refer the <a href=\"https:\/\/jwt.io\/introduction\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">official website documentation.<\/a><\/p>\r\n",
    "author": "Suryapratap Singh",
    "like": 0
}